<style lang="less">
</style>

<template>
<view class="xb-panel-title-grid">
  <view class="theme-{{pkg.theme}}" wx:if="{{pkg.theme === 'no-border'}}">
    <!-- header -->
    <view class="tg-head weui-cell_link">
      <view class="weui-cell__bd tg-h-title">{{pkg.hd.title}}</view>
      <view class="weui-cell__ft tg-h-desc weui-cell__ft_in-access" wx:if="{{pkg.hd.desc}}">{{pkg.hd.desc}}</view>
    </view>

    <!-- body -->
    <view class="tg-body">
      <view class="tg-b-btn-item" wx:for="{{pkg.bd.list}}" wx:key="{{index}}" style="width: {{pkg.width}};" wx:if="{{!item.hidden}}" data-idx="{{index}}" @tap="bindTap">
        <button class="btn-svc" open-type="{{item.openType}}">
          <!-- 图标优先使用FontAwesome -->
          <view class="fa {{item.fa}} icon" wx:if="{{item.fa}}"></view>
          <view wx:else><image class="img" src="{{item.img}}" /></view>
          <!-- 文本描述 -->
          <text class="txt">{{item.title}}</text>
          <!-- 数量-徽标-小红点 -->
          <view class="zan-badge__count" wx:if="{{item.cnt > 0}}">
            <text>{{item.cnt}}</text>
          </view>
        </button>
      </view>
    </view>
  </view>
</view>
</template>

<script>
import wepy from 'wepy';
import MixCompRefresher from '../../../mixins/MixCompRefresher';
export default class XBUserSvc extends wepy.component {
  mixins = [MixCompRefresher];

  props = {
    theme: { type: [String], default: 'no-border' },
    width: { type: [String], default: '25%' }
  };

  methods = {
    bindTap(e) {
      const idx = e.currentTarget.dataset.idx;
      this.$emit('xb-user-svc-btn-tap', idx, this.$name);
    }
  }

  doPostRefresh() {
    // 智能计算width
    let pkg = this.pkg; // MixCompRefresher中定义
    if (!pkg.theme || pkg.theme === 'default') {
      pkg.theme = this.theme;
    }
    if (!pkg.width) {
      let arr = [5, 3, 4];
      let len = pkg.bd.list.length;
      pkg.width = this.width;
      for (let i = 0; i < arr.length; ++i) {
        if (len % arr[i] === 0) {
          pkg.width = Math.round(100 / arr[i]) + '%';
          break;
        }
      }
    }
  }

  onLoad() {
    console.log(`${this.$name} loaded.`);
  }
}
</script>
