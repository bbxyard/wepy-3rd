<style lang="less">
@import '../../style/xb.less';
@colorTimeDiff: #c3c3c3;
@colorCmdWrite: #6d80a4;
@colorCmdDel: #677ba3;
@xbMedSize: 0.75rem;

.xb-comment {
  .head {
    font-size: @xbMedLongSize;
    text-align: center;
    margin: 3rem @xbMarginLR;
    margin-bottom: 0rem;
    .weui-loadmore_line { margin-top: 3rem; }
    .weui-loadmore__tips_in-line {
      background-color: @xbDefaultBGColor;
    }
  }
  .head-line {
    border-top: 1px solid @xbSepLineColor;
  }
  .body {
    .weui-cells-fb { 
      background-color: @xbDefaultBGColor;
      display: flex;
      flex-direction: column;
      .weui-cell-fb { padding: 20rpx 30rpx; }
      .weui-cell-fb-cmd {
        height: @xbMedSize;
        line-height: @xbMedSize;
        font-size: @xbMedSize;
        padding: 0 30rpx;
        .cmd {
          float: right;
          color: @colorCmdWrite;
          padding-right: 0.45rem;
        }
        .icon {
          float: right;
          width: @xbMedSize;
          height: @xbMedSize;
        }
      }
    }
    .weui-media-box_fb {
      display: flex;
      align-items: top;
      padding: 20rpx 0 20rpx 0;
      .weui-media-box__hd {
        width: @xbAvatarSide;
        height: @xbAvatarSide;
        margin-right: 0.5rem;
        .img { width: 100%; height: 100%; position: relative; top: @xbCommentAvatarTopOffset; }
      }
      .weui-media-box__bd {
        .weui-media-box__desc {
          line-height: 1rem;
        }
        .xb-fb-action {
          display: flex;
          font-size: @xbMedSize;
          color: #CECECE;
          .time {
            color: @colorTimeDiff;
          }
          .action {
            color: @colorCmdDel;
            padding-left: 0.65rem;
          }
        }
      }
    }
  }
}
</style>

<template>
  <view class="xb-comment" wx:if="{{ui}}">
    <!-- head -->
    <view class="head head-line" wx:if="{{ui.title}}">
      <view class="weui-loadmore__tips weui-loadmore__tips_in-line">{{ui.title}}</view>
    </view>
  
    <!-- body -->
    <view class="body">
      <view class="weui-cells-fb">
        <!-- 发表留言 -->
        <view class="weui-cell-fb-cmd" wx:if="{{!ui.command.hidden}}">
          <image class="icon" src="{{ui.command.icon}}" />
          <txt class="cmd" @tap="tapWrite">{{ui.command.write}}</txt>
        </view>
        <!-- 评论区item -->
        <view class="weui-cell-fb">
        <block wx:for="{{comments}}" wx:item="{{item}}" wx:key="{{index}}">
          <view class="weui-media-box_fb">
            <view class="weui-media-box__hd">
              <image class="img" src="{{item.avatarUrl}}" />
            </view>
            <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
              <view class="weui-media-box__title">{{item.nickName}}</view>
              <view class="weui-media-box__desc">{{item.content}}</view>
              <view class="xb-fb-action">
                <view class="time">{{item.timeStr}}</view>
                <view class="action" @tap="tapDel" id="{{item.id}}" wx:if="{{!ui.userAction.del.hidden}}">{{ui.userAction.del.title}}</view>
                <view class="action" @tap="tapReply" id="{{item.id}}" wx:if="{{!ui.userAction.reply.hidden}}">{{ui.userAction.reply.title}}</view>
              </view>
            </view>
          </view>
        </block>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import VTMixGlobal from '../../mixins/MixGlobal';
export default class XBWeCommenter extends wepy.component {
  mixins = [VTMixGlobal];

  props = { };

  data = {
    ui: null,
    comments: []
  };

  methods = {
    tapWrite(e) {
      // 登录后才可以评论
      if (!this.UT.isUIAdvMode()) {
        this.loginThenWrite();  // 先登录
      } else {
        this.doWriteComment();
      }
    },
    tapDel(e) {
      this.$emit('comment-delete', e.target.id);
    },
    tapReply(e) {
      this.$emit('comment-reply', e.target.id);
    },
    refresh(ui, comments) {
      this.ui = ui;
      this.comments = comments;
      this.$apply();
      console.log(`${this.$name} update: cnt=` + this.comments.length);
    }
  };

  async loginThenWrite() {
    // const resTips =
    await wepy.showModal(this.ui.command.loginTips);
    const resAuth = await this.UT.loginAndVerify();
    if (resAuth.errno === 0) {
      this.doWriteComment();
    }
  }

  doWriteComment() {
    console.log('comment-write one');
    this.$emit('comment-write');
  }

  onLoad() {
    console.log(`${this.$name} loaded`);
  }
}
</script>
