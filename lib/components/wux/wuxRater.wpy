<style lang="less">
.wux-rater {
  .disabled { cursor: not-allowed; }
  .content { display: block; }
  .rater-input { display: block; }
  .bugfix_only_last_box_after {
    color: white;
    // float: left;
  }
  .wux-rater__content { 
    display: flex; flex-direction: column; justify-content: center; height: 100%;
    text { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; word-wrap: normal; }
  }
}
</style>

<template>
	<view class="wux-rater {{rt.className}} {{rt.animateCss}} {{mode === 'W' ? 'weui-input' : ''}}">
		<!-- 星标 -->
    <block wx:for="{{getStars}}" wx:key="{{index}}">
			<view class="wux-rater__box {{ value > index ? 'wux-rater__box--active' : '' }} {{ mode === 'R' ? 'disabled' : '' }}" 
          @tap="bindClick" data-index="{{index}}"
          style="color: {{rt.colors && rt.colors[index] ? rt.colors[index]: defaultColor }}; {{getSizeStyle}}">
				<view class="wux-rater__inner" style="{{getSizeStyle}}">
					{{star}}
					<view class="wux-rater__outer" wx:if="{{ rt.cutPercent > 0 && rt.cutIndex === index }}"
            style="{{getSizeStyle}}; color: {{activeColor}}; {{getCutStyle}}">
						{{star}}
					</view>
				</view>
			</view>
		</block>

    <!-- last-of-type搞不定，自定义空结点来占位 -->
    <text class="bugfix_only_last_box_after" space="ensp" wx:if="{{item.text || item || mode === 'W' || content}}">
      {{spec.box_ph}}
    </text>

    <!-- 星标文本 -->
		<block wx:for="{{text}}" wx:key="{{index}}">
			<view class="wux-rater__text {{item.className}}" wx:if="{{ value === index + 1 }}" style="color: {{ item.color || defaultTextColor }}">
				{{ item.text || item }}
			</view>
		</block>

    <!-- 扩展文本 -->
    <view class="wux-rater__content" wx:if="{{mode === 'W'}}">
      <input value="{{content}}" maxlength="{{maxlength}}" @input="bindInput" class="rater-input" placeholder="{{ph}}" />
    </view>
    <view class="wux-rater__content" wx:if="{{mode === 'R'}}">
      <text>{{content}}</text>
    </view>
	</view>
</template>

<script>
import wepy from 'wepy';
import MixCompRefresher from '@/../mixins/MixCompRefresher';
export default class WrapWuxRater extends wepy.component {
  mixins = [MixCompRefresher];
  props = {
    mode: { type: [String], default: 'R' },
    max: { type: [String, Number], default: 5 },
    value: { type: [String, Number], default: 0 },
    star: { type: [String], default: '★' },
    activeColor: { type: [String], default: '#fc6' },
    defaultColor: { type: [String], default: '#ccc' },
    // margin: { type: [String], default: '4rpx' },
    height: { type: [String], default: '100%' },
    fontSize: { type: [String], default: '50rpx' },
    text: { type: [Array], default: [] },
    maxlength: { type: [Number], default: 0 },  // 激活input
    content: { type: [String], default: '' },
    ph: { type: [String], default: '' }, // placeholder
    direction: { type: [String], default: 'row' },
    defaultTextColor: { type: [String], default: '#999' }

    // row, row-r, column, colum-r
  };
  data = {
    rt: {
      className: '',
      animateCss: '',
      stars: [],
      colors: [],
      cutIndex: -1,
      cutPercent: 0
    },
    spec: { box_ph: ' ' }
  };
  watch = {
    value (newV, oldV) {
      console.log(`value: from ${newV} to ${oldV}`);
    }
  };
  methods = {
    /**
     * 点击触发事件
     */
    bindClick(e) {
      const idx = e.currentTarget.dataset.index;
      const value = this.value;
      if (this.mode !== 'R') {
        this.update(value === idx + 1 ? idx : idx + 1);
      }
    },
    bindInput(e) {
      const content = e.detail.value;
      this.$emit('wux-rater-input', content, this.$name);
    }
  };
  computed = {
    getSizeStyle() {
      const fontSize = this.fontSize;
      // const margin = (index + 1 !== this.max) ? `margin-right: ${this.margin}; ` : '';
      // const margin = `margin-right: ${this.margin}; `;
      // margin 外设更方便.
      let style = `font-size: ${fontSize}; width: ${fontSize}; line-height: ${fontSize};`;
      style = style + ' height: ' + (this.height ? this.height : fontSize) + ';';
      return style;
    },
    getCutStyle() {
      let whStyle = '';
      this._updateCut();
      if (this.direction === 'column' || this.direction === 'column-r') {
        whStyle = `height: ${this.rt.cutPercent}%; width: 100%`;
      } else {
        whStyle = `width: ${this.rt.cutPercent}%; height: 100%`;
      }
      return whStyle;
    },
    getStars() {
      if (this.rt.stars.length === 0 && this.value > 0) {
        console.log('re-computed: ', this.value);
        this.update(this.value);
      }
      return this.rt.stars;
    }
  };

  /**
   * 更新 value
   */
  update(rawValue = 0) {
    const _val = Number(rawValue);
    const newVal = (_val < 0) ? 0 : (_val > this.max ? this.max : _val);
    this.value = newVal;

    // 更新stars
    this._initStars();

    // 更新cut
    this._updateCut();

    // 更新color-style
    this._updateColorStyle();

    this.$emit('wux-rater-value', this.value, this.$name);
  }

  // 更新stars
  _initStars() {
    if (this.rt.stars.length !== this.max) {
      const stars = [];
      for (let i = 0; i < this.max; ++i) stars.push(i);
      this.rt.stars = stars;
    }
  }

  // 更新cut
  _updateCut() {
    const v100 = Number(this.value) * 100;
    this.rt.cutIndex = parseInt(v100 / 100);
    this.rt.cutPercent = v100 % 100;
    switch (this.direction) {
      case 'row-r':
      case 'column-r':
        this.rt.cutIndex = this.rt.cutPercent >= 50 ? this.rt.cutIndex + 1 : this.rt.cutIndex;
        this.rt.cutPercent = 0; // reverse下，无百分比. 四舍5入
        break;
    }
  }

  // 更新color-style
  _updateColorStyle() {
    const bound = this.rt.cutIndex;
    const colors = [];
    for (let i = 0; i < bound; ++i) colors.push(this.activeColor);
    for (let j = bound; j < this.max; ++j) colors.push(this.defaultColor);
    this.rt.colors = colors;
  }

  doPostRefresh() {
    if (this.pkg.opt) {
      const {opt} = this.pkg;
      const keys = ['mode', 'max', 'maxlength', 'content', 'ph',
        'activeColor', 'fontSize', 'value'];
      keys.forEach(key => {
        if (opt[key] !== undefined) this[key] = opt[key];
      });
    }
    this.update(this.value);
  }

  onLoad() {
    console.log(`${this.$name}-Rater loaded. [${this.value} / ${this.max}]`);
  }
}
</script>
